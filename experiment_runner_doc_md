# ExperimentRunner Documentation

## Overview
The `ExperimentRunner` class is designed to simulate and evaluate the performance of language models, specifically GPT-3.5 and GPT-4, on temporal reasoning tasks. It provides tools to generate stories, track entities' locations over time, and evaluate models' predictions based on these simulations.

---

## Table of Contents
1. [Class: ExperimentRunner](#class-experimentrunner)
2. [Methods](#methods)
   - [__init__](#__init__)
   - [initialize_locations](#initialize_locations)
   - [update_state](#update_state)
   - [run_simulation](#run_simulation)
   - [print_sequences](#print_sequences)
   - [make_temporal_tracking_map](#make_temporal_tracking_map)
   - [find_observance_event](#find_observance_event)
   - [generate_examples](#generate_examples)
   - [prompt_gpt](#prompt_gpt)
   - [run_trials](#run_trials)
   - [model_evals](#model_evals)

---

## Class: ExperimentRunner

### Description
This class initializes and manages an experiment environment where entities (e.g., people) interact within predefined locations. It generates simulation data, runs experiments, and evaluates language models' predictions on reasoning tasks.

---

## Methods

### `__init__`
**Description:**  
Initializes the `ExperimentRunner` object with the provided experiment parameters.

**Parameters:**
- `people` (list): A list of entities involved in the experiment.
- `locations` (list): A list of possible locations for entities.
- `relation` (str): The relation to be tracked (e.g., "jumps_in").
- `models` (list): A list of model names (e.g., ["gpt-3.5", "gpt-4"]).
- `num_trials` (int): The number of trials to run.
- `length_threshold` (int): Minimum length of sequences for trials.
- `trial_seed` (int): Seed for randomization.
- `params` (dict): Additional parameters for prompts and experiment setup.

---

### `initialize_locations`
**Description:**  
Sets up the initial locations for all entities, placing each at the last location in the `locations` list.

**Returns:**  
`dict`: A dictionary mapping each entity to its initial location.

---

### `update_state`
**Description:**  
Updates the current location state for all entities, tracking movements over time.

**Parameters:**
- `subject` (str): The entity being moved.
- `new_loc` (str): The new location of the subject.
- `current_locations` (dict): The current location state of all entities.

---

### `run_simulation`
**Description:**  
Simulates the movements of entities over a series of steps.

**Parameters:**
- `steps` (int): The number of simulation steps.

**Returns:**  
- `str`: A string representation of all movements in the simulation.
- `dict`: The final location states of all entities.

---

### `print_sequences`
**Description:**  
Converts simulation sequences into readable strings.

**Parameters:**
- `sequences` (str): The simulation sequences.

**Returns:**  
`str`: A readable description of all movements.

---

### `make_temporal_tracking_map`
**Description:**  
Generates a map of entities' locations over time for tracking purposes.

**Parameters:**
- `steps` (int): The number of steps in the simulation.
- `current_locations` (dict): The location data of all entities.

**Returns:**  
`list`: A temporal tracking map of locations and associated entities.

---

### `find_observance_event`
**Description:**  
Identifies events where an entity observes another entity moving between locations.

**Parameters:**
- `temporal_map` (list): The temporal tracking map.
- `target` (str): The entity being observed.
- `current_locations` (dict): The location data of all entities.

**Returns:**  
`list`: A list of tuples representing observance events.

---

### `generate_examples`
**Description:**  
Generates example stories and reasoning traces for prompts.

**Parameters:**
- `num` (int): The number of examples to generate.
- `prompt_type` (str): The type of prompt (e.g., "standard" or "cot").

**Returns:**  
`str`: Example stories and reasoning traces.

---

### `prompt_gpt`
**Description:**  
Generates a response from a language model based on the provided prompt.

**Parameters:**
- `prompt` (str): The input prompt for the model.
- `model` (str): The name of the model to use.

**Returns:**  
`str`: The model's response.

---

### `run_trials`
**Description:**  
Executes multiple trials of the experiment, generating prompts and evaluating models.

**Parameters:**
- `n` (int): The number of trials to run.
- `seed` (int, optional): A seed for randomization.

**Returns:**  
`list`: A list of trial results.

---

### `model_evals`
**Description:**  
Runs model evaluations across multiple trials and computes accuracy and confidence intervals.

**Returns:**  
`dict`: Accuracy results for each model.

---